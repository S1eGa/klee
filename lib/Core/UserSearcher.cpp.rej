diff a/lib/Core/UserSearcher.cpp b/lib/Core/UserSearcher.cpp	(rejected hunks)
@@ -61,6 +61,22 @@ namespace {
   UseBumpMerge("use-bump-merge", 
            cl::desc("Enable support for klee_merge() (extra experimental)"));
 
+  cl::opt<bool> UseSplittedSearcher("split-search", cl::desc("..."));
+
+  cl::list<Searcher::RecoverySearchType> RecoverySearch(
+    "recovery-search",
+    cl::desc("Specify the recovery search heuristic (disabled by default)"),
+	  cl::values(
+      clEnumValN(Searcher::RS_DFS, "dfs", "use depth first search"),
+      clEnumValN(Searcher::RS_RandomPath, "random-path", "use random path selection"),
+      clEnumValEnd
+    )
+  );
+
+  cl::opt<unsigned int>
+  SplitRatio("split-ratio",
+            cl::desc("ratio for choosing recovery states (default = 20)"),
+            cl::init(20));
 }
 
 
@@ -132,6 +148,33 @@ Searcher *klee::constructUserSearcher(Executor &executor) {
     searcher = new IterativeDeepeningTimeSearcher(searcher);
   }
 
+  if (UseSplittedSearcher) {
+    /* TODO: Should both of the searchers be of the same type? */
+    searcher = new SplittedSearcher(searcher, new DFSSearcher(), SplitRatio);
+  }
+
+  if (!RecoverySearch.empty()) {
+    Searcher *recoverySearcher = NULL;
+    switch (RecoverySearch[0]) {
+    case Searcher::RS_DFS:
+        recoverySearcher = new DFSSearcher();
+        break;
+
+    case Searcher::RS_RandomPath:
+        recoverySearcher = new RandomRecoveryPath(executor);
+        break;
+    }
+
+    if (recoverySearcher == NULL) {
+      klee_error("invalid recovery search heuristic");
+    }
+
+    searcher = new OptimizedSplittedSearcher(searcher,
+                                             new DFSSearcher(),
+                                             recoverySearcher,
+                                             SplitRatio);
+  }
+
   llvm::raw_ostream &os = executor.getHandler().getInfoStream();
 
   os << "BEGIN searcher description\n";
